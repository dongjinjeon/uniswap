{"ast":null,"code":"import { JSBI, Percent, Router, TradeType } from '@uniswap/sdk';\nimport { useMemo } from 'react';\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants';\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport v1SwapArguments from '../utils/v1SwapArguments';\nimport { useActiveWeb3React } from './index';\nimport { useV1ExchangeContract } from './useContract';\nimport useENS from './useENS';\nimport { Version } from './useToggledVersion';\nexport let SwapCallbackState;\n\n(function (SwapCallbackState) {\n  SwapCallbackState[SwapCallbackState[\"INVALID\"] = 0] = \"INVALID\";\n  SwapCallbackState[SwapCallbackState[\"LOADING\"] = 1] = \"LOADING\";\n  SwapCallbackState[SwapCallbackState[\"VALID\"] = 2] = \"VALID\";\n})(SwapCallbackState || (SwapCallbackState = {}));\n\n/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param deadline the deadline for the trade\r\n * @param recipientAddressOrName\r\n */\nfunction useSwapCallArguments(trade, // trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE, // in bips\ndeadline = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\nrecipientAddressOrName) {\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  const v1Exchange = useV1ExchangeContract(useV1TradeExchangeAddress(trade), true);\n  return useMemo(() => {\n    const tradeVersion = getTradeVersion(trade);\n    if (!trade || !recipient || !library || !account || !tradeVersion || !chainId) return [];\n    const contract = tradeVersion === Version.v2 ? getRouterContract(chainId, library, account) : v1Exchange;\n\n    if (!contract) {\n      return [];\n    }\n\n    const swapMethods = [];\n\n    switch (tradeVersion) {\n      case Version.v2:\n        swapMethods.push(Router.swapCallParameters(trade, {\n          feeOnTransfer: false,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          ttl: deadline\n        }));\n\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\n          swapMethods.push(Router.swapCallParameters(trade, {\n            feeOnTransfer: true,\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n            recipient,\n            ttl: deadline\n          }));\n        }\n\n        break;\n\n      case Version.v1:\n        swapMethods.push(v1SwapArguments(trade, {\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          ttl: deadline\n        }));\n        break;\n    }\n\n    return swapMethods.map(parameters => ({\n      parameters,\n      contract\n    }));\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, v1Exchange]);\n} // returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\n\n\nexport function useSwapCallback(trade, // trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE, // in bips\ndeadline = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\nrecipientAddressOrName) {\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName);\n  const addTransaction = useTransactionAdder();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies'\n      };\n    }\n\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient'\n        };\n      } else {\n        return {\n          state: SwapCallbackState.LOADING,\n          callback: null,\n          error: null\n        };\n      }\n    }\n\n    const tradeVersion = getTradeVersion(trade);\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap() {\n        const estimatedCalls = await Promise.all(swapCalls.map(call => {\n          const {\n            parameters: {\n              methodName,\n              args,\n              value\n            },\n            contract\n          } = call;\n          const options = !value || isZero(value) ? {} : {\n            value\n          };\n          return contract.estimateGas[methodName](...args, options).then(gasEstimate => {\n            return {\n              call,\n              gasEstimate\n            };\n          }).catch(gasError => {\n            console.debug('Gas estimate failed, trying eth_call to extract error', call);\n            return contract.callStatic[methodName](...args, options).then(result => {\n              console.debug('Unexpected successful call after failed estimate gas', call, gasError, result);\n              return {\n                call,\n                error: new Error('Unexpected issue with estimating the gas. Please try again.')\n              };\n            }).catch(callError => {\n              console.debug('Call threw error', call, callError);\n              let errorMessage;\n\n              switch (callError.reason) {\n                case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\n                case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\n                  errorMessage = 'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.';\n                  break;\n\n                default:\n                  errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`;\n              }\n\n              return {\n                call,\n                error: new Error(errorMessage)\n              };\n            });\n          });\n        })); // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n\n        const successfulEstimation = estimatedCalls.find((el, ix, list) => 'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]));\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter(call => 'error' in call);\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error;\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error');\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: {\n              methodName,\n              args,\n              value\n            }\n          },\n          gasEstimate\n        } = successfulEstimation;\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          ...(value && !isZero(value) ? {\n            value,\n            from: account\n          } : {\n            from: account\n          })\n        }).then(response => {\n          const inputSymbol = trade.inputAmount.currency.symbol;\n          const outputSymbol = trade.outputAmount.currency.symbol;\n          const inputAmount = trade.inputAmount.toSignificant(3);\n          const outputAmount = trade.outputAmount.toSignificant(3);\n          const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n          const withRecipient = recipient === account ? base : `${base} to ${recipientAddressOrName && isAddress(recipientAddressOrName) ? shortenAddress(recipientAddressOrName) : recipientAddressOrName}`;\n          const withVersion = tradeVersion === Version.v2 ? withRecipient : `${withRecipient} on ${tradeVersion.toUpperCase()}`;\n          addTransaction(response, {\n            summary: withVersion\n          });\n          return response.hash;\n        }).catch(error => {\n          // if the user rejected the tx, pass this along\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n            throw new Error('Transaction rejected.');\n          } else {\n            // otherwise, the error was unexpected and we need to convey that\n            console.error(`Swap failed`, error, methodName, args, value);\n            throw new Error(`Swap failed: ${error.message}`);\n          }\n        });\n      },\n      error: null\n    };\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction]);\n}","map":{"version":3,"sources":["C:/Users/dev_01/uniswapclonef/uniswap-front-interface/src/hooks/useSwapCallback.ts"],"names":["JSBI","Percent","Router","TradeType","useMemo","BIPS_BASE","DEFAULT_DEADLINE_FROM_NOW","INITIAL_ALLOWED_SLIPPAGE","getTradeVersion","useV1TradeExchangeAddress","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","shortenAddress","isZero","v1SwapArguments","useActiveWeb3React","useV1ExchangeContract","useENS","Version","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","deadline","recipientAddressOrName","account","chainId","library","address","recipientAddress","recipient","v1Exchange","tradeVersion","contract","v2","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","ttl","tradeType","EXACT_INPUT","v1","map","parameters","useSwapCallback","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","onSwap","estimatedCalls","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","debug","callStatic","result","Error","callError","errorMessage","reason","successfulEstimation","find","el","ix","list","length","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","withVersion","toUpperCase","summary","hash","code","message"],"mappings":"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","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\r\nimport { Contract } from '@ethersproject/contracts'\r\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@uniswap/sdk'\r\nimport { useMemo } from 'react'\r\nimport { BIPS_BASE, DEFAULT_DEADLINE_FROM_NOW, INITIAL_ALLOWED_SLIPPAGE } from '../constants'\r\nimport { getTradeVersion, useV1TradeExchangeAddress } from '../data/V1'\r\nimport { useTransactionAdder } from '../state/transactions/hooks'\r\nimport { calculateGasMargin, getRouterContract, isAddress, shortenAddress } from '../utils'\r\nimport isZero from '../utils/isZero'\r\nimport v1SwapArguments from '../utils/v1SwapArguments'\r\nimport { useActiveWeb3React } from './index'\r\nimport { useV1ExchangeContract } from './useContract'\r\nimport useENS from './useENS'\r\nimport { Version } from './useToggledVersion'\r\n\r\nexport enum SwapCallbackState {\r\n  INVALID,\r\n  LOADING,\r\n  VALID\r\n}\r\n\r\ninterface SwapCall {\r\n  contract: Contract\r\n  parameters: SwapParameters\r\n}\r\n\r\ninterface SuccessfulCall {\r\n  call: SwapCall\r\n  gasEstimate: BigNumber\r\n}\r\n\r\ninterface FailedCall {\r\n  call: SwapCall\r\n  error: Error\r\n}\r\n\r\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\r\n\r\n/**\r\n * Returns the swap calls that can be used to make the trade\r\n * @param trade trade to execute\r\n * @param allowedSlippage user allowed slippage\r\n * @param deadline the deadline for the trade\r\n * @param recipientAddressOrName\r\n */\r\nfunction useSwapCallArguments(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\r\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): SwapCall[] {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  const v1Exchange = useV1ExchangeContract(useV1TradeExchangeAddress(trade), true)\r\n\r\n  return useMemo(() => {\r\n    const tradeVersion = getTradeVersion(trade)\r\n    if (!trade || !recipient || !library || !account || !tradeVersion || !chainId) return []\r\n\r\n    const contract: Contract | null =\r\n      tradeVersion === Version.v2 ? getRouterContract(chainId, library, account) : v1Exchange\r\n    if (!contract) {\r\n      return []\r\n    }\r\n\r\n    const swapMethods = []\r\n\r\n    switch (tradeVersion) {\r\n      case Version.v2:\r\n        swapMethods.push(\r\n          Router.swapCallParameters(trade, {\r\n            feeOnTransfer: false,\r\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n            recipient,\r\n            ttl: deadline\r\n          })\r\n        )\r\n\r\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n          swapMethods.push(\r\n            Router.swapCallParameters(trade, {\r\n              feeOnTransfer: true,\r\n              allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n              recipient,\r\n              ttl: deadline\r\n            })\r\n          )\r\n        }\r\n        break\r\n      case Version.v1:\r\n        swapMethods.push(\r\n          v1SwapArguments(trade, {\r\n            allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\r\n            recipient,\r\n            ttl: deadline\r\n          })\r\n        )\r\n        break\r\n    }\r\n    return swapMethods.map(parameters => ({ parameters, contract }))\r\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade, v1Exchange])\r\n}\r\n\r\n// returns a function that will execute a swap, if the parameters are all valid\r\n// and the user has approved the slippage adjusted input amount for the trade\r\nexport function useSwapCallback(\r\n  trade: Trade | undefined, // trade to execute, required\r\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\r\n  deadline: number = DEFAULT_DEADLINE_FROM_NOW, // in seconds from now\r\n  recipientAddressOrName: string | null // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\r\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\r\n  const { account, chainId, library } = useActiveWeb3React()\r\n\r\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, deadline, recipientAddressOrName)\r\n\r\n  const addTransaction = useTransactionAdder()\r\n\r\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\r\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\r\n\r\n  return useMemo(() => {\r\n    if (!trade || !library || !account || !chainId) {\r\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\r\n    }\r\n    if (!recipient) {\r\n      if (recipientAddressOrName !== null) {\r\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\r\n      } else {\r\n        return { state: SwapCallbackState.LOADING, callback: null, error: null }\r\n      }\r\n    }\r\n\r\n    const tradeVersion = getTradeVersion(trade)\r\n\r\n    return {\r\n      state: SwapCallbackState.VALID,\r\n      callback: async function onSwap(): Promise<string> {\r\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\r\n          swapCalls.map(call => {\r\n            const {\r\n              parameters: { methodName, args, value },\r\n              contract\r\n            } = call\r\n            const options = !value || isZero(value) ? {} : { value }\r\n\r\n            return contract.estimateGas[methodName](...args, options)\r\n              .then(gasEstimate => {\r\n                return {\r\n                  call,\r\n                  gasEstimate\r\n                }\r\n              })\r\n              .catch(gasError => {\r\n                console.debug('Gas estimate failed, trying eth_call to extract error', call)\r\n\r\n                return contract.callStatic[methodName](...args, options)\r\n                  .then(result => {\r\n                    console.debug('Unexpected successful call after failed estimate gas', call, gasError, result)\r\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\r\n                  })\r\n                  .catch(callError => {\r\n                    console.debug('Call threw error', call, callError)\r\n                    let errorMessage: string\r\n                    switch (callError.reason) {\r\n                      case 'UniswapV2Router: INSUFFICIENT_OUTPUT_AMOUNT':\r\n                      case 'UniswapV2Router: EXCESSIVE_INPUT_AMOUNT':\r\n                        errorMessage =\r\n                          'This transaction will not succeed either due to price movement or fee on transfer. Try increasing your slippage tolerance.'\r\n                        break\r\n                      default:\r\n                        errorMessage = `The transaction cannot succeed due to error: ${callError.reason}. This is probably an issue with one of the tokens you are swapping.`\r\n                    }\r\n                    return { call, error: new Error(errorMessage) }\r\n                  })\r\n              })\r\n          })\r\n        )\r\n\r\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\r\n        const successfulEstimation = estimatedCalls.find(\r\n          (el, ix, list): el is SuccessfulCall =>\r\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1])\r\n        )\r\n\r\n        if (!successfulEstimation) {\r\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\r\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\r\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\r\n        }\r\n\r\n        const {\r\n          call: {\r\n            contract,\r\n            parameters: { methodName, args, value }\r\n          },\r\n          gasEstimate\r\n        } = successfulEstimation\r\n\r\n        return contract[methodName](...args, {\r\n          gasLimit: calculateGasMargin(gasEstimate),\r\n          ...(value && !isZero(value) ? { value, from: account } : { from: account })\r\n        })\r\n          .then((response: any) => {\r\n            const inputSymbol = trade.inputAmount.currency.symbol\r\n            const outputSymbol = trade.outputAmount.currency.symbol\r\n            const inputAmount = trade.inputAmount.toSignificant(3)\r\n            const outputAmount = trade.outputAmount.toSignificant(3)\r\n\r\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\r\n            const withRecipient =\r\n              recipient === account\r\n                ? base\r\n                : `${base} to ${\r\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\r\n                      ? shortenAddress(recipientAddressOrName)\r\n                      : recipientAddressOrName\r\n                  }`\r\n\r\n            const withVersion =\r\n              tradeVersion === Version.v2 ? withRecipient : `${withRecipient} on ${(tradeVersion as any).toUpperCase()}`\r\n\r\n            addTransaction(response, {\r\n              summary: withVersion\r\n            })\r\n\r\n            return response.hash\r\n          })\r\n          .catch((error: any) => {\r\n            // if the user rejected the tx, pass this along\r\n            if (error?.code === 4001) {\r\n              throw new Error('Transaction rejected.')\r\n            } else {\r\n              // otherwise, the error was unexpected and we need to convey that\r\n              console.error(`Swap failed`, error, methodName, args, value)\r\n              throw new Error(`Swap failed: ${error.message}`)\r\n            }\r\n          })\r\n      },\r\n      error: null\r\n    }\r\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}